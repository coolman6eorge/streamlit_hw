import streamlit as st
import pandas as pd
import asyncio

from analysis import (
    analyze_city_data, analyze_city_data_parallel, 
    analyze_city_data_sequential, check_temperature_anomaly
)
from weather_api import WeatherAPI
from utils import (
    load_data, get_current_season, create_time_series_plot,
    create_seasonal_profile
)
from data_generator import generate_temperature_data

st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
    layout="wide",
    initial_sidebar_state="expanded"
)

async def run_async_function(func, *args, **kwargs):
    return await func(*args, **kwargs)

if 'data' not in st.session_state:
    st.session_state.data = None
if 'api_key' not in st.session_state:
    st.session_state.api_key = None
if 'weather_api' not in st.session_state:
    st.session_state.weather_api = WeatherAPI()
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None
if 'selected_city' not in st.session_state:
    st.session_state.selected_city = None

st.title("üå°Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —á–µ—Ä–µ–∑ OpenWeatherMap API")

st.sidebar.header("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")

if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö"):
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö..."):
        data = generate_temperature_data()
        st.session_state.data = data
        st.sidebar.success("–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

uploaded_file = st.sidebar.file_uploader("–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ", type=["csv"])
if uploaded_file is not None:
    try:
        st.session_state.data = load_data(uploaded_file)
        st.sidebar.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    except Exception as e:
        st.sidebar.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

api_key = st.sidebar.text_input("–ö–ª—é—á API OpenWeatherMap", type="password")
if api_key:
    st.session_state.api_key = api_key
    st.session_state.weather_api.set_api_key(api_key)

if st.session_state.data is not None:
    cities = st.session_state.data['city'].unique().tolist()
    
    selected_city = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cities)
    if selected_city != st.session_state.selected_city:
        st.session_state.selected_city = selected_city
        st.session_state.analysis_results = None
    
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    window_size = st.sidebar.slider("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (–¥–Ω–µ–π)", 7, 60, 30)
    
    analysis_method = st.sidebar.radio(
        "–ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞",
        ["–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ", "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"]
    )
    
    api_method = st.sidebar.radio(
        "–ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ API",
        ["–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"]
    )
    
    if st.sidebar.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
            if analysis_method == "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ":
                results, execution_time = analyze_city_data_parallel(
                    st.session_state.data, [selected_city], window_size
                )
                st.session_state.analysis_results = results[selected_city]
            else:
                results, execution_time = analyze_city_data_sequential(
                    st.session_state.data, [selected_city], window_size
                )
                st.session_state.analysis_results = results[selected_city]
            
            st.sidebar.info(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {execution_time:.4f} —Å–µ–∫—É–Ω–¥")
    
    if st.session_state.analysis_results:
        results = st.session_state.analysis_results
        city_data = results['city_data']
        rolling_mean = results['rolling_mean']
        rolling_std = results['rolling_std']
        anomalies = results['anomalies']
        upper_bound = results['upper_bound']
        lower_bound = results['lower_bound']
        seasonal_stats = results['seasonal_stats']
        
        st.header(f"–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è {selected_city}")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            summary = pd.DataFrame({
                '–ú–µ—Ç—Ä–∏–∫–∞': ['–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', 
                            '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ', '–í—Å–µ–≥–æ –¥–Ω–µ–π', '–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π'],
                '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                    f"{city_data['temperature'].mean():.2f}",
                    f"{city_data['temperature'].min():.2f}",
                    f"{city_data['temperature'].max():.2f}",
                    f"{city_data['temperature'].std():.2f}",
                    f"{len(city_data)}",
                    f"{len(anomalies)} ({len(anomalies)/len(city_data)*100:.1f}%)"
                ]
            })
            st.table(summary)
        
        with col2:
            st.subheader("–°–µ–∑–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            seasonal_table = seasonal_stats.copy()
            seasonal_table.columns = ['–°–µ–∑–æ–Ω', '–°—Ä–µ–¥–Ω–µ–µ (¬∞C)', '–°—Ç–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ (¬∞C)', '–ú–∏–Ω (¬∞C)', '–ú–∞–∫—Å (¬∞C)']
            seasonal_table = seasonal_table.round(2)
            st.table(seasonal_table)
        
        st.subheader("–í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
        fig = create_time_series_plot(
            city_data, selected_city, rolling_mean, upper_bound, lower_bound, anomalies
        )
        st.plotly_chart(fig, use_container_width=True)
        
        st.subheader("–°–µ–∑–æ–Ω–Ω—ã–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å")
        seasonal_fig, _ = create_seasonal_profile(city_data, selected_city)
        st.plotly_chart(seasonal_fig, use_container_width=True)
        
        if st.session_state.api_key:
            st.header("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
            
            try:
                with st.spinner("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã..."):
                    if api_method == "–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ":
                        weather_data = st.session_state.weather_api.get_current_temperature_sync(selected_city)
                    else:
                        weather_data = asyncio.run(
                            run_async_function(
                                st.session_state.weather_api.get_current_temperature_async,
                                selected_city
                            )
                        )
                    
                    current_temp = weather_data['temperature']
                    current_season = get_current_season()
                    
                    is_anomalous, message = check_temperature_anomaly(
                        current_temp, seasonal_stats, current_season
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric(
                            label=f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {selected_city}",
                            value=f"{current_temp:.1f}¬∞C",
                            delta=f"{current_temp - city_data['temperature'].mean():.1f}¬∞C –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º —Å—Ä–µ–¥–Ω–∏–º"
                        )
                        st.text(f"–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {weather_data['description']}")
                        st.text(f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {weather_data['request_time']:.4f} —Å–µ–∫—É–Ω–¥")
                        st.text(f"–ú–µ—Ç–æ–¥ API: {api_method}")
                    
                    with col2:
                        if is_anomalous:
                            st.error(message)
                        else:
                            st.success(message)
                        
                        st.text(f"–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {current_season.capitalize()}")
                        season_data = seasonal_stats[seasonal_stats['season'] == current_season]
                        if not season_data.empty:
                            st.text(f"–°—Ä–µ–¥–Ω–µ–µ –∑–∞ —Å–µ–∑–æ–Ω: {season_data['mean'].values[0]:.1f}¬∞C")
                            st.text(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞ —Å–µ–∑–æ–Ω: {season_data['std'].values[0]:.1f}¬∞C")
                
            except ValueError as e:
                st.error(str(e))
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    else:
        if st.session_state.selected_city:
            st.info("–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑', —á—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.")
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö.")